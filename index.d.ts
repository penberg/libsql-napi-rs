/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export interface Options {
  timeout?: number
}
export interface RunResult {
  changes: number
  duration: number
  lastInsertRowid: number
}
export declare class SqliteError {
  message: string
  code: string
  rawCode: number
}
export declare class AuthorizerArgs { }
export declare class Database {
  /**
   * Only supports arity-1 (callback style) JS hooks: cb => cb("allow")
   * This is required due to napi v2 threading restrictions.
   */
  authorizer(hook: (...args: any[]) => any): void
  get memory(): boolean
  constructor(path: string, opts?: Options | undefined | null)
  inTransaction(): boolean
  prepare(sql: string): Statement
  pragma(): void
  backup(): void
  serialize(): void
  function(): void
  aggregate(): void
  table(): void
  loadExtension(path: string): void
  maxWriteReplicationIndex(): void
  exec(sql: string): void
  interrupt(): void
  close(): void
  defaultSafeIntegers(toggle?: boolean | undefined | null): void
  unsafeMode(): void
}
export declare class Statement {
  columns(): unknown[]
  iterate(params?: unknown | undefined | null): object
  run(params?: unknown | undefined | null): RunResult
  all(params?: unknown | undefined | null): unknown[]
  pluck(pluck?: boolean | undefined | null): this
  raw(raw?: boolean | undefined | null): this
  get(params?: unknown | undefined | null): unknown
  safeIntegers(toggle?: boolean | undefined | null): this
}
export declare class StatementRows { }
